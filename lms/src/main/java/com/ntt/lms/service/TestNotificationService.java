package com.ntt.lms.service;

import com.ntt.lms.pojo.*;
import com.ntt.lms.repository.NotificationRepository;
import com.ntt.lms.repository.UsersRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

@Service
@RequiredArgsConstructor
public class TestNotificationService {

    private final NotificationRepository notificationRepository;
    private final UsersRepository usersRepository;

    // G·ª≠i th√¥ng b√°o khi user b·∫Øt ƒë·∫ßu l√†m b√†i test
    @Transactional
    public void sendTestStartedNotification(int userId, int testId, String testTitle) {
        Users user = usersRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i"));
        
        Notifications notification = new Notifications();
        notification.setUserId(user);
        notification.setMessage("B·∫°n ƒë√£ b·∫Øt ƒë·∫ßu l√†m b√†i test: " + testTitle);
        notification.setCreatedTime(new Date());
        notification.setRead(false);
        
        notificationRepository.save(notification);
    }

    // G·ª≠i th√¥ng b√°o khi user ho√†n th√†nh b√†i test
    @Transactional
    public void sendTestCompletedNotification(int userId, int testId, String testTitle, Double score) {
        Users user = usersRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i"));
        
        String message = "B·∫°n ƒë√£ ho√†n th√†nh b√†i test: " + testTitle;
        if (score != null) {
            message += " v·ªõi ƒëi·ªÉm s·ªë: " + String.format("%.2f", score * 100) + "%";
        }
        
        Notifications notification = new Notifications();
        notification.setUserId(user);
        notification.setMessage(message);
        notification.setCreatedTime(new Date());
        notification.setRead(false);
        
        notificationRepository.save(notification);
    }

    // G·ª≠i th√¥ng b√°o khi c√≥ b√†i test m·ªõi
    @Transactional
    public void sendNewTestNotification(List<Integer> userIds, int testId, String testTitle) {
        for (Integer userId : userIds) {
            Users user = usersRepository.findById(userId)
                    .orElseThrow(() -> new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i"));
            
            Notifications notification = new Notifications();
            notification.setUserId(user);
            notification.setMessage("C√≥ b√†i test m·ªõi: " + testTitle);
            notification.setCreatedTime(new Date());
            notification.setRead(false);
            
            notificationRepository.save(notification);
        }
    }

    // G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü l√†m b√†i test
    @Transactional
    public void sendTestReminderNotification(int userId, int testId, String testTitle) {
        Users user = usersRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i"));
        
        Notifications notification = new Notifications();
        notification.setUserId(user);
        notification.setMessage("Nh·∫Øc nh·ªü: B·∫°n ch∆∞a ho√†n th√†nh b√†i test: " + testTitle);
        notification.setCreatedTime(new Date());
        notification.setRead(false);
        
        notificationRepository.save(notification);
    }

    // G·ª≠i th√¥ng b√°o khi c√≥ k·∫øt qu·∫£ b√†i test
    @Transactional
    public void sendTestResultNotification(int userId, int testId, String testTitle, Double score) {
        Users user = usersRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i"));
        
        String message = "K·∫øt qu·∫£ b√†i test: " + testTitle;
        if (score != null) {
            if (score >= 0.8) {
                message += " - Xu·∫•t s·∫Øc! (" + String.format("%.2f", score * 100) + "%)";
            } else if (score >= 0.6) {
                message += " - T·ªët! (" + String.format("%.2f", score * 100) + "%)";
            } else if (score >= 0.4) {
                message += " - Trung b√¨nh (" + String.format("%.2f", score * 100) + "%)";
            } else {
                message += " - C·∫ßn c·∫£i thi·ªán (" + String.format("%.2f", score * 100) + "%)";
            }
        }
        
        Notifications notification = new Notifications();
        notification.setUserId(user);
        notification.setMessage(message);
        notification.setCreatedTime(new Date());
        notification.setRead(false);
        
        notificationRepository.save(notification);
    }

    // G·ª≠i th√¥ng b√°o khi c√≥ b√†i test s·∫Øp h·∫øt h·∫°n
    @Transactional
    public void sendTestExpiryWarningNotification(int userId, int testId, String testTitle, long remainingMinutes) {
        Users user = usersRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i"));
        
        String timeUnit = remainingMinutes < 60 ? "ph√∫t" : "gi·ªù";
        long displayTime = remainingMinutes < 60 ? remainingMinutes : remainingMinutes / 60;
        
        Notifications notification = new Notifications();
        notification.setUserId(user);
        notification.setMessage("C·∫£nh b√°o: B√†i test " + testTitle + " s·∫Ω h·∫øt h·∫°n sau " + displayTime + " " + timeUnit);
        notification.setCreatedTime(new Date());
        notification.setRead(false);
        
        notificationRepository.save(notification);
    }

    // G·ª≠i th√¥ng b√°o khi user ƒë·∫°t th√†nh t√≠ch m·ªõi
    @Transactional
    public void sendAchievementNotification(int userId, String achievement, String description) {
        Users user = usersRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i"));
        
        Notifications notification = new Notifications();
        notification.setUserId(user);
        notification.setMessage("üéâ Th√†nh t√≠ch m·ªõi: " + achievement + " - " + description);
        notification.setCreatedTime(new Date());
        notification.setRead(false);
        
        notificationRepository.save(notification);
    }

    // G·ª≠i th√¥ng b√°o t·ªïng h·ª£p h√†ng tu·∫ßn
    @Transactional
    public void sendWeeklySummaryNotification(int userId, int testsCompleted, Double averageScore, int improvementRank) {
        Users user = usersRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i"));
        
        String message = "üìä T√≥m t·∫Øt tu·∫ßn: B·∫°n ƒë√£ ho√†n th√†nh " + testsCompleted + " b√†i test";
        if (averageScore != null) {
            message += " v·ªõi ƒëi·ªÉm trung b√¨nh " + String.format("%.2f", averageScore * 100) + "%";
        }
        if (improvementRank > 0) {
            message += ". X·∫øp h·∫°ng c·∫£i thi·ªán: " + improvementRank;
        }
        
        Notifications notification = new Notifications();
        notification.setUserId(user);
        notification.setMessage(message);
        notification.setCreatedTime(new Date());
        notification.setRead(false);
        
        notificationRepository.save(notification);
    }
}



















